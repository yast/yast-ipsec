/**
 * File:	include/ipsec/wizards.ycp
 * Package:	Configuration of ipsec
 * Summary:	Wizards definitions
 * Authors:	Ludwig Nussel <lnussel@suse.de>
 *
 * $Id$
 */

{

textdomain "ipsec";

import "Sequencer";
import "Wizard";

include "ipsec/complex.ycp";
include "ipsec/dialogs.ycp";
//include "ipsec/certdialogs.ycp";


/**
 * Add a configuration of ipsec
 * @return sequence result
 */
any AddSequence() {

    map aliases = $[
	"newconn"	: ``(NewConnectionDialog()),
	"askname"	: [ ``(AskConnectionNamePopup()), true ],
	"configl"	: ``(LeftConnectionConfigDialog()),
	"configr"	: ``(RightConnectionConfigDialog()),
	"config4"	: ``(ConnectionConfigEncryptionDialog()),
	"startmode"	: ``(ConnectionStartModeDialog()),
	"done"		: ``(ConnectionDoneDialog()),
	"importl"	: [ ``( CertificateOverviewDialog() ), true ],
	"importr"	: [ ``( CertificateOverviewDialog() ), true ],
	"importrws"	: [ ``( CertificateOverviewDialog() ), true ],
	"importrwc"	: [ ``( CertificateOverviewDialog() ), true ],
	"rws"		: ``( EasyRoadWarriorServerDialog() ),
	"rwc"		: ``( EasyRoadWarriorClientDialog() ),
    ];

    map sequence = $[
	"ws_start" : "newconn",
	"newconn" : $[
	    `abort	: `abort,
	    `custom	: "askname",
	    `rws	: "rws",
	    `rwc	: "rwc",
	    `edit	: "configl",
	],
	"askname" : $[
	    `abort	: `abort,
	    `next	: "configl",
	],
	"rws" : $[
	    `abort	: `abort,
	    `next	: "startmode",
	    `needcert	: "importrws",
	],
	"rwc" : $[
	    `abort	: `abort,
	    `next	: "startmode",
	    `needcert	: "importrwc",
	],
	"configl" : $[
	    `abort	: `abort,
	    `next	: "configr",
	    `import	: "importl"
	],
	"configr" : $[
	    `abort	: `abort,
	    `next	: "startmode",
	    `import	: "importr"
	],
	"config4" : $[
	    `abort	: `abort,
	    `next	: "startmode",
	],
	"startmode" : $[
	    `abort	: `abort,
	    `next	: "done",
	],
	"importl" : $[
	    `abort	: `abort,
	    `next	: "configl"
	],
	"importr" : $[
	    `abort	: `abort,
	    `next	: "configr"
	],
	"importrws" : $[
	    `abort	: `abort,
	    `next	: "rws",
	],
	"importrwc" : $[
	    `abort	: `abort,
	    `next	: "rwc",
	],
	"done" : $[
	    `abort	: `abort,
	    `next	: `next
	],
    ];

    return Sequencer::Run(aliases, sequence);
}

///**
// * Import Certificate Sequence
// * @return sequence result
// */
//any ImportSequence() {
//
//    map aliases = $[
//	"certstart"	: ``(CertificateImportDialog1()),
//	"certfiles"	: ``(CertificateImportDialogFiles()),
//	"certpkcs12"	: ``(CertificateImportDialogPKCS12()),
//	"certzip"	: ``(CertificateImportDialogFiles()),
//    ];
//
//    map sequence = $[
//	"ws_start" : "certstart",
//	"certstart" : $[
//	    `abort	: `abort,
//	    `next	: `next,
//	    `files	: "certfiles",
//	    `pkcs12	: "certpkcs12",
//	    `zip	: "certzip",
//	],
//	"certfiles" : $[
//	    `abort	: `abort,
//	    `next	: `next,
//	],
//	"certpkcs12" : $[
//	    `abort	: `abort,
//	    `next	: `next,
//	],
//	"certzip" : $[
//	    `abort	: `abort,
//	    `next	: `next,
//	],
//    ];
//
//    return Sequencer::Run(aliases, sequence);
//}

/**
 * Main workflow of the ipsec configuration
 * @return sequence result
 */
any MainSequence() {

    map aliases = $[
	"summary"	:   ``( SummaryDialog() ),
	"overview"	:   ``( OverviewDialog() ),
	"certificates"	:   ``( CertificateOverviewDialog()),
	"configure"	: [ ``( AddSequence() ), true ],
	"add"		: [ ``( AddSequence() ), true ],
	"edit"		: [ ``( AddSequence() ), true ],
	"settings"	: [ ``( FreeSWANSettingsDialog() ), true ],
	"configE"	: [ ``( ConnectionExpertDialog() ), true ],
	"export"	: [ ``( ExportConnectionDialog() ), true ],
	"import"	: [ ``( ImportConnectionDialog() ), true ],
    ];

    map sequence = $[
	"ws_start" : "summary",
	"summary" : $[
	    `abort	: `abort,
	    `next	: `next,
	    `overview	: "overview",
	    `configure	: "configure",
	    `other	: "configure",
	    `settings	: "settings",
	    `certificates	: "certificates",
	],
	"overview" : $[
	    `abort	: `abort,
	    `next	: "summary",
	    `add	: "add",
	    `edit	: "edit",
	    `expert	: "configE",
	    `export     : "export",
	    `import     : "import",
	],
	"certificates" : $[
	    `abort	: `abort,
	    `next	: "summary",
	],
	"configure" : $[
	    `abort	: `abort,
	    `next	: "summary",
	],
	"add" : $[
	    `abort	: "overview", // do not quit whole workflow
	    `next	: "overview",
	],
	"edit" : $[
	    `abort	: "overview", // do not quit whole workflow
	    `next	: "overview",
	],
	"settings" : $[
	    `abort	: `abort,
	    `next	: "summary",
	],
	"configE" : $[
	    `abort	: "overview", // do not quit whole workflow
	    `next	: "overview",
	],
	"export" : $[
	    `abort	: `abort,
	    `next	: "overview",
	],
	"import" : $[
	    `abort	: `abort,
	    `next	: "overview",
	],
    ];

    any ret = Sequencer::Run(aliases, sequence);

    return ret;
}

/**
 * Whole configuration of ipsec
 * @return sequence result
 */
any IPsecSequence() {

    map aliases = $[
	"read"	: [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence() ),
	"write"	: [ ``( WriteDialog() ), true ],
	"finish": [ ``( FinishDialog() ), true ]
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" : $[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: "finish"
	],
	"finish" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    Wizard::CreateDialog();
    Wizard::SetDesktopIcon("ipsec");

    any ret = Sequencer::Run(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of ipsec but without reading and writing.
 * For use with autoinstallation.
 * @return sequence result
 */
any IPsecAutoSequence() {

    /* Initialization dialog caption */
    string caption = _("IPsec Configuration");
    /* Initialization dialog contents */
    term contents = `Label(_("Initializing..."));

    Wizard::CreateDialog();
    Wizard::SetDesktopIcon("ipsec");
    Wizard::SetContentsButtons(caption, contents, "",
	    Label::BackButton(), Label::NextButton());

    any ret = MainSequence();

    UI::CloseDialog();
    return ret;
}

/* EOF */
}
