/**
 * File:	include/ipsec/certdialogs.ycp
 * Package:	Configuration of ipsec
 * Summary:	Dialogs definitions
 * Authors:	Ludwig Nussel <lnussel@suse.de>
 *
 * $Id$
 */

{

textdomain "ipsec";

import "Label";
import "Wizard";
import "IPsec";
import "Label";

include "ipsec/helps.ycp";

/**
 * Configure1 dialog
 * @return dialog result
 */
any CertificateImportDialog1 ()
{
    /* IPsec configure1 dialog caption */
    string caption = _("Certificate Import");

    /* IPsec configure1 dialog contents */
    term contents = `HBox(
	`HStretch(),
	`Frame(_("Choose Fileformat"),
	    `RadioButtonGroup(`id(`rbg),
		`VBox(
		    `Left(`RadioButton(`id(`files), _("Separate files"), true)),
		    `Left(`RadioButton(`id(`pkcs12), _("File in PKCS#12 format"))),
		    `Left(`RadioButton(`id(`zip), _("ZIP file containing certificates and Keys")))
		)
	    )
	),
	`HStretch()
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["c1"]:"",
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `next)
	{
	    ret = (symbol) UI::QueryWidget(`id(`rbg), `CurrentButton);
	    break;
	}
	else if(ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

string PasswordPopup(string headline)
{
    UI::OpenDialog(
	`VBox(
	    `Heading(headline),
	    `Password(`id(`pass), "Password:"),
	    `VSpacing(0.5),
	    `HBox(
		`PushButton(`id(`ok), Label::OKButton()),
		`PushButton(`id(`cancel), Label::CancelButton())
	    )
	)
    );

    if( UI::UserInput() != `ok)
    {
	UI::CloseDialog();
	return nil;
    }

    string pw = (string) UI::QueryWidget(`id(`pass), `Value);

    UI::CloseDialog();

    return pw;
}

/**
 * Configure1 dialog
 * @return dialog result
 */
any CertificateImportDialogFiles () {

    /* IPsec configure1 dialog caption */
    string caption = _("Certificate Import");

    /* IPsec configure1 dialog contents */
    term contents = `HBox(
	`HStretch(),
	`VBox(
	/*
	    `Frame(_("Import all at once"),
		`HBox(
		    `PushButton(`id(`zip), _("Zip file...")),
		    `PushButton(`id(`pkcs12), _("PKCS12 file..."))
		)
	    ),
	    */
	    `VSpacing(2),
	    `HBox(`TextEntry(`id(`cacert), _("CA Certificate file to import")),
		`PushButton(`id(`bcacert),_("Browse..."))),
	    `HBox(`TextEntry(`id(`cert), _("Certificate file to import")),
		`PushButton(`id(`bcert),_("Browse..."))),
	    `HBox(`TextEntry(`id(`key), _("Key file to import")),
		`PushButton(`id(`bkey),_("Browse..."))),
	    `HBox(`TextEntry(`id(`crl), _("CRL file to import")),
		`PushButton(`id(`bcrl),_("Browse...")))
	),
	`HStretch()
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["c1"]:"",
	    Label::BackButton(), Label::NextButton());

    UI::SetFocus(`id(`bcacert));

    string cacertfile = nil;
    string certfile = nil;
    string keyfile = nil;
    string password = nil;
    string crlfile = nil;

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `next)
	{
	    //TODO
	    //SCR::Execute(.etc.ipsec.d, [ "importcert", certfile ]);
	    //SCR::Execute(.etc.ipsec.d, [ "importkey", password, keyfile ]);
	    break;
	}
	else if(ret == `back) {
            break;
        }
	else if(ret == `bcacert)
	{
	    string file = UI::AskForExistingFile ( IPsec::certimportdir, "*.pem *.PEM", _("Choose CA Certificate File"));
	    if(!IPsec::updateImportDir(file)) continue;
	    UI::ChangeWidget(`id(`cacert), `Value, file );
	    cacertfile = file;
	    UI::SetFocus(`id(`bcert));
	}
	else if(ret == `bcert)
	{
	    string file = UI::AskForExistingFile ( IPsec::certimportdir, "*.pem *.PEM", _("Choose Certificate File"));
	    if(!IPsec::updateImportDir(file)) continue;
	    UI::ChangeWidget(`id(`cert), `Value, file );
	    certfile = file;
	    UI::SetFocus(`id(`bkey));
	}
	else if(ret == `bkey)
	{
	    string file = UI::AskForExistingFile ( IPsec::certimportdir, "*.pem *.PEM", _("Choose Key File"));
	    if(!IPsec::updateImportDir(file)) continue;
	    string pw = PasswordPopup(_("Enter Key Password"));
	    if(pw == nil) continue;
	    UI::ChangeWidget(`id(`key), `Value, file );
	    keyfile = file;
	    password = pw;
	    UI::SetFocus(`id(`next));
	}
	else if(ret == `bcrl)
	{
	    string file = UI::AskForExistingFile ( IPsec::certimportdir, "*.pem *.PEM", _("Choose CRL File"));
	    if(!IPsec::updateImportDir(file)) continue;
	    UI::ChangeWidget(`id(`crl), `Value, file );
	    crlfile = file;
	    UI::SetFocus(`id(`next));
	}
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/** open popup window asking for file and password
 * @return list. element 0 is filename, 1 is the password. nil if any is empty
 * */
list askp12file()
{
    string p12file = UI::AskForExistingFile ( IPsec::certimportdir, "*.p12 *.P12", _("Choose PKCS#12 file"));

    if(p12file == nil)
	return nil;

    string p12pass = PasswordPopup(_("Enter PKCS#12 Password"));

    if(p12pass == nil)
	return nil;

    UI::ChangeWidget(`id(`file), `Value, p12file );

    return [ p12file, p12pass ];
}


boolean importP12()
{
    string cacert = _("none");
    string cert = _("none");
    string key = _("none");

    while(true)
    {
	list p12 = askp12file();

	if(p12 == nil)
	    return false;

	map content = IPsec::PrepareImportP12(p12[0]:"", p12[1]:"");

	if(haskey(content,"error"))
	{
	    Popup::Error(content["error"]:"Confused");
	    return false;
	}

	cacert = content["cacert"]:_("none");
	cert = content["cert"]:_("none");
	key = content["key"]:_("none");

	break;
    }

    UI::ChangeWidget(`id(`cacert), `Value, cacert );
    UI::ChangeWidget(`id(`cert), `Value, cert );
    UI::ChangeWidget(`id(`key), `Value, key );

    UI::RecalcLayout();

    return true;
}

/**
 * Configure1 dialog
 * @return dialog result
 */
any CertificateImportDialogPKCS12 () {

    /* IPsec configure1 dialog caption */
    string caption = _("Certificate Import");

    /* IPsec configure1 dialog contents */
    term contents = `HBox(
	`HStretch(),
	`VBox(
	    `HBox(
		`Label(_("PKCS#12 file to import")),
		`HStretch(),
		`Label(`id(`file), `opt(`outputField), "")
	    ),
	    `HBox(
		`HStretch(),
		`PushButton(`id(`browse), _("Browse..."))
	    ),
	    `VSpacing(2.5),
	    `HBox(
		`Label(_("CA Certificate")),
		`HStretch(),
		`Label(`id(`cacert), `opt(`outputField), "")
	    ),
	    `VSpacing(0.5),
	    `HBox(
		`Label(_("Certificate")),
		`HStretch(),
		`Label(`id(`cert), `opt(`outputField), "")
	    ),
	    `VSpacing(0.5),
	    `HBox(
		`Label(_("Key")),
		`HStretch(),
		`Label(`id(`key), `opt(`outputField), "")
	    )
	),
	`HStretch()
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["p12"]:"",
	    Label::BackButton(), Label::NextButton());

    if(importP12() == false)
	return `back;

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `next)
	{
	    IPsec::ImportPreparedP12();
	    break;
	}
	else if(ret == `back) {
	}
	else if(ret == `browse) {
	    if(importP12() == false)
		continue;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}


}
