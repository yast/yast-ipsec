#!/usr/bin/perl -w

# TODO
# just dumps basic ipsec.conf to STDERR, no checking if valid

use lib "/usr/lib/YaST2/agents_non_y2";
use ycp;

use strict;

my $ipsecconf  = "/etc/ipsec.conf";

my %defaultsetup = (
    nat_traversal => "no",
    strictcrlpolicy => "no",
    crlcheckinterval => "10",
);

my %defaultconn = (
    af => "inet",
    keyingtries => "3",
    pfs => "yes",
    auto => "ignore",
);
my %oppocons = (
    "block" => 1,
    "private" => 1,
    "private-or-clear" => 1,
    "clear-or-private" => 1,
    "clear" => 1,
    "packetdefault" => 1
);

sub defaultconf()
{
    my %conf = ( "config setup" => \%defaultsetup );

    return %conf;
}

sub dumpconn($)
{
    my $conn = shift;
    my $spc = 4;
    
    foreach my $key (sort keys %{$conn})
    {
	print STDERR " "x$spc.$key."=\"".$conn->{$key}."\"\n";
    }
}

sub dumpipsecconf($)
{
    my $conf = shift;
    my $key;

    print STDERR "version 2.0\n";

    print STDERR "\nconfig setup\n";
    dumpconn($conf->{"config setup"});
    delete $conf->{"config setup"};

    # disable opportunistic
    foreach $key (keys %oppocons)
    {
	next if(exists $conf->{$key});

	my %a = ("auto" => "ignore");
	print STDERR "\nconn $key\n";
	dumpconn(\%a);
    }

    foreach $key (sort keys %{$conf})
    {
	my $type = ref $conf->{$key};
        next unless ( $type eq "HASH" );
	print STDERR "\nconn $key\n";
	dumpconn($conf->{$key});
    }
}

sub main()
{

    while(<STDIN>)
    {
	my ($command, $path, $arg ) = ycp::ParseCommand( $_ );

	$command = "" unless $command;
	$path = "" unless $path;
	$arg = "" unless $arg;

	y2milestone("$command");

	if( $command eq "Write" && $path eq ".")
	{
	    if(ref($arg) eq "HASH")
	    {
		my %conf = defaultconf();
		# merge with default config
		foreach my $key (keys %{$arg})
		{
		    $conf{$key} = $arg->{$key};
		}
		dumpipsecconf(\%conf);
		ycp::Return( "true" );
	    }
	    ycp::Return( "false" );
	}
	# result: we must exit
	elsif ($command eq "result")
	{
	    y2milestone ("got result -> say goodbye!");
	    last;
	}
	else
	{
	    y2error(sprintf( "Unknown instruction %s on %s argument: %s(%s)", $command, $path, $arg, ref($arg)));
	    ycp::Return( () );
	}
    }
}

main();


exit 0; 
