/**
 * File:	include/ipsec/complex.ycp
 * Package:	Configuration of ipsec
 * Summary:	Dialogs definitions
 * Authors:	Ludwig Nussel <lnussel@suse.de>
 *
 * $Id$
 */

{

textdomain "ipsec";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "IPsec";
import "IPsecConfig";

include "ipsec/helps.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return IPsec::Modified();
}

boolean ReallyAbort() {
    return !IPsec::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    // IPsec::AbortFunction = PollAbort;
    boolean ret = IPsec::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    IPsec::AbortFunction = PollAbort;
    boolean ret = IPsec::Write();
    return ret ? `next : `abort;
}

term SummaryRichText(string summary)
{
    return `HBox(
	`HSpacing(1.5),
	`VBox(
	    `Left(`RadioButtonGroup(`VBox(
		`RadioButton(`id(`ipsecoff), `opt(`notify), _("Disable VPN Services")),
		`RadioButton(`id(`ipsecon), `opt(`notify), _("Enable VPN Services"))
	    ))),
	    `VSpacing(0.3),
	    `RichText(`id(`the_richtext), summary),
	    /*
	    `HBox(
		`Right(`PushButton(`id("settings"), `opt (`key_F2), _("Settings..."))),
		`Right(`PushButton(`id("certificates"), `opt (`key_F3), _("C&ertificates..."))),
		`Right(`PushButton(`id("connections"), `opt (`key_F4), _("C&onnections...")))
	    ),
	    */
	    `MenuButton(`id (`menubutton),
		// menu button
		_("Change..."), [
		    // menubutton item
		    `item(`id("connections"), _("C&onnections")),
		    // menubutton item
		    `item(`id("certificates"), _("C&ertificates")),
		    // menubutton item
		    `item(`id("settings"), IPsec::settings_str)
	    ]),
	    `VSpacing(1)
	),
	`HSpacing(1.5)
    );
}

/**
 * Enable or Disable widget depending whether IPsec is started at boot or not
 * @return nil `import if certificates need to be imported, `configure if
 * connections should be configured or nil to do nothing;
 * */
symbol SummaryEnableDisable()
{
    if(IPsec::getStart() != true)
    {
	UI::ChangeWidget(`id(`ipsecoff), `Value, true);
	UI::ChangeWidget(`id(`the_richtext), `Enabled, false);
	UI::ChangeWidget(`id(`menubutton), `Enabled, false);
	return nil;
    }

    UI::ChangeWidget(`id(`ipsecon), `Value, true);
    UI::ChangeWidget(`id(`the_richtext), `Enabled, true);
    UI::ChangeWidget(`id(`menubutton), `Enabled, true);
    UI::SetFocus(`id(`the_richtext));

    if(!IPsec::didaskaboutemptycertificates && !IPsec::haveCertificates())
    {
	IPsec::didaskaboutemptycertificates = true;
	if(Popup::YesNo(
	    _("There are no certificates imported yet.
Import certificates now?
")) == true)
	{
	    return `certificates;
	}
    }

    if(!IPsec::didaskaboutemptyconnections && !IPsec::haveConnections())
    {
	IPsec::didaskaboutemptyconnections = true;
	if(Popup::YesNo(
	    _("There are no connections defined yet.
Define connections now?
")) == true)
	{
	    return `configure;
	}
    }
}

/**
 * Summary dialog
 * @return dialog result
 */
any SummaryDialog() {

    /* IPsec summary dialog caption */
    string caption = _("VPN Configuration");

    string summary = IPsec::MainSummary();

    /* Frame label */
//    term contents = Wizard_hw::DetectedContent(_("IPsec to Configure"),
//	    unconfigured, false, configured);

    term contents = SummaryRichText(summary);

    Wizard::SetContentsButtons(caption, contents, HELPS["summary"]:"",
	    Label::BackButton(), Label::FinishButton());

    any ret = nil;

    ret = SummaryEnableDisable();
    if(ret != nil)
	return ret;

    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        /* overview dialog */
        else if(ret == `edit_button) {
            ret = `overview;
            break;
        }
        /* configure the selected device */
        else if(ret == `configure_button) {
	    // TODO FIXME: check for change of the configuration
            any selected = UI::QueryWidget(`id(`detected_selbox), `CurrentItem);
            if(selected == `other) {
                ret = `other;
            }
            else {
                ret = `configure;
            }
            break;
        }
        else if(ret == `next) {
	    /* not possible with current layout
	    if(!IPsec::getStart() && IPsec::haveConnections())
	    {
		if(Popup::YesNo(_("You did configure connections but didn't
enable the option to start IPsec during boot.
Do you want to start IPsec during boot?")))
		{
		    IPsec::setStart(true);
		}
	    }
	    */
            break;
        }
        else if(ret == "settings") {
	    if(IPsec::getStart() != true) continue;
	    ret = `settings;
            break;
        }
        else if(ret == "connections") {
	    if(IPsec::getStart() != true) continue;
	    ret = `overview;
            break;
        }
        else if(ret == "certificates") {
	    if(IPsec::getStart() != true) continue;
	    ret = `certificates;
            break;
        }
        else if(ret == `ipsecon) {
	    IPsec::setStart(true);
	    ret = SummaryEnableDisable();
	    if(ret != nil)
		return ret;
        }
        else if(ret == `ipsecoff) {
	    IPsec::setStart(false);
	    ret = SummaryEnableDisable();
	    if(ret != nil)
		return ret;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

void OverviewDialogCreate()
{
    /* IPsec overview dialog caption */
    string caption = _("Connection Overview");

    list overview = IPsec::Overview();
    term buttons = `Right(
	`MenuButton(`id (`menubutton),
	    // menu button
	    _("E&xpert..."), [
		// menubutton item
		`item (`id (`view_button), _("&View")),
		// menubutton item
		`item (`id (`export_button), _("&Export")),
		// menubutton item
		//`item (`id (`import_button), _("&Import")),
		// menubutton item
		`item (`id (`expert_button), _("&Details")),
	])
    );

    // menu button Expert -> export, import, details

    term contents = Wizard_hw::ConfiguredContent(
	/* Table header */
	`header(_("Connection"), _("Local"), _("Remote"), _("Start Mode"), _("Dynamic Start")),
	overview, nil, nil,
	    nil, buttons );

    contents = Wizard_hw::SpacingAround(contents, 1.5, 1.5, 1.0, 1.0);

    Wizard::SetContentsButtons(caption, contents, HELPS["overview"]:"",
	    Label::BackButton(), Label::OKButton());
}

/**
 * Overview dialog
 * @return dialog result
 */
any OverviewDialog()
{
    OverviewDialogCreate();

    UI::SetFocus(`id(`add_button));

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        /* add */
        else if(ret == `add_button) {
            ret = `add;
	    string name = (string) UI::QueryWidget(`id(`table), `CurrentItem);
	    IPsec::newConnection();
            break;
        }
        /* edit */
        else if(ret == `edit_button) {
            ret = `edit;

	    string name = (string) UI::QueryWidget(`id(`table), `CurrentItem);
	    if(!IPsec::setCurrentConnection(name))
		continue;

	    IPsec::edit_start = true;

            break;
        }
        /* delete */
        else if(ret == `delete_button)
	{
	    string conn = (string) UI::QueryWidget(`id(`table), `CurrentItem);
	    IPsec::DeleteConnection(conn);
	    OverviewDialogCreate();
            continue;
        }
        /* expert */
        else if(ret == `expert_button) {
            ret = `expert;

	    string name = (string) UI::QueryWidget(`id(`table), `CurrentItem);
	    if(!IPsec::setCurrentConnection(name))
		continue;

            break;
        }
        else if(ret == `export_button)
	{
	    string name = (string) UI::QueryWidget(`id(`table), `CurrentItem);
	    if(!IPsec::setCurrentConnection(name))
		continue;
            ret = `export;
	    break;
	}
        else if(ret == `view_button) {
	    string name = (string) UI::QueryWidget(`id(`table), `CurrentItem);
	    if(!IPsec::setCurrentConnection(name))
		continue;

	    Popup::LongText(sformat(_("Settings for Connection '%1'"), name),
		`RichText(IPsec::ConnectionAsText()), 60, 18);
            continue;
        }
        else if(ret == `import_button) {
            ret = `import;
	    break;
	}
        else if(ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

term CertificateOverviewContents(term header, list content)
{
    string caption = _("Certificate Overview");

    term contents = `VBox(
    /*
	`RadioButtonGroup(`id(`rbg),
	    `HBox(
		`RadioButton(`id(`cacerts), `opt(`notify), _("CA Certificates")),
		`RadioButton(`id(`certs), `opt(`notify), _("Certificates")),
		`RadioButton(`id(`crls), `opt(`notify), _("CRLs")),
		`RadioButton(`id(`keys), `opt(`notify), _("Keys"))
	    )
	),
	*/
	`ComboBox(`id (`cbox), `opt(`notify),
	    // combo box
	    _("Current View"), [
		// combobox item
		`item(`id(`cacerts), _("CA Certificates")),
		// combobox item
		`item(`id(`certs), _("Certificates")),
		// combobox item
		`item(`id(`crls), _("CRLs")),
		// combobox item
		`item(`id(`keys), _("Keys"))
	]),

	`Table(`id(`table), `opt(`notify), header, content),
	`Left(`HBox(
	    `PushButton(`id(`imp), _("&Import")),
	    `PushButton(`id(`del), _("&Delete"))
	)),
	`VSpacing(1)
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["certificates"]:"",
	    Label::BackButton(), Label::NextButton());
}

void setCertContents()
{
    // DN is a X509 property called "Distinguised Name". Probably not
    // translatable. 'N' stands for new.
    CertificateOverviewContents(`header(_("N"), _("File"), _("DN")), IPsec::CertOverview());
//    UI::ChangeWidget(`id(`certs), `Value, true);
    UI::ChangeWidget(`id(`cbox), `Value, `certs);
    UI::SetFocus(`id(`imp));

}
void setCACertContents()
{
    // DN is a X509 property called "Distinguised Name". Probably not
    // translatable. 'N' stands for new.
    CertificateOverviewContents(`header(_("N"), _("File"), _("DN")), IPsec::CACertOverview());
//    UI::ChangeWidget(`id(`cacerts), `Value, true);
    UI::ChangeWidget(`id(`cbox), `Value, `cacerts);
    UI::SetFocus(`id(`imp));
}
void setCRLContents()
{
    // 'N' stands for new.
    CertificateOverviewContents(`header(_("N"), _("File"), _("Next Update"), _("Issuer")), IPsec::CRLOverview());
//    UI::ChangeWidget(`id(`crls), `Value, true);
    UI::ChangeWidget(`id(`cbox), `Value, `crls);
    UI::SetFocus(`id(`imp));
}
void setKeyContents()
{
    // 'N' stands for new.
    CertificateOverviewContents(`header(_("N"), _("File")), IPsec::KeyOverview());
//    UI::ChangeWidget(`id(`keys), `Value, true);
    UI::ChangeWidget(`id(`cbox), `Value, `keys);
    UI::SetFocus(`id(`imp));
}

any CertificateOverviewDialog ()
{
    symbol mode = `certs;
    setCertContents();

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	y2milestone("ret = %1", ret);

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `certs)
	{
	    setCertContents();
	    mode = (symbol) ret;
	}
	else if(ret == `cacerts)
	{
	    setCACertContents();
	    mode = (symbol) ret;
	}
	else if(ret == `keys)
	{
	    setKeyContents();
	    mode = (symbol) ret;
	}
	else if(ret == `crls)
	{
	    setCRLContents();
	    mode = (symbol) ret;
	}
	else if (ret == `cbox)
	{
	    mode = (symbol) UI::QueryWidget(`id(`cbox), `Value);
	    if(mode == `certs)
	    {
		setCertContents();
	    }
	    else if(mode == `keys)
	    {
		setKeyContents();
	    }
	    else if(mode == `crls)
	    {
		setCRLContents();
	    }
	    else
	    {
		mode = `cacerts;
		setCACertContents();
	    }
	}
	else if(ret == `imp)
	{
	    string file = UI::AskForExistingFile( IPsec::certimportdir,
		"*.pem *.PEM *.p12 *.P12 *.zip *.ZIP",
		_("Choose the file to import."));

	    if(!IPsec::updateImportDir(file)) continue;

	    string msg = IPsecConfig::prepareImportFile(file);
	    if(msg != nil)
	    {
		Popup::Error(msg);
		continue;
	    }

	    if(mode == `certs)
	    {
		setCertContents();
	    }
	    else if(mode == `keys)
	    {
		setKeyContents();
	    }
	    else if(mode == `crls)
	    {
		setCRLContents();
	    }
	    else
	    {
		mode = `cacerts;
		setCACertContents();
	    }

	    continue;
	}
	else if(ret == `del)
	{
	    string val = (string) UI::QueryWidget(`id(`table), `CurrentItem);
	    if(val == nil)
		continue;

	    // %1 = filename
	    if(Popup::YesNo(sformat(_("Delete %1?"), val)) == false)
		continue;

	    if(mode == `cacerts)
	    {
		IPsec::deleteCACert(val);
		setCACertContents();
	    }
	    else if(mode == `certs)
	    {
		IPsec::deleteCert(val);
		setCertContents();
	    }
	    else if(mode == `keys)
	    {
		IPsec::deleteKey(val);
		setKeyContents();
	    }
	    else if(mode == `crls)
	    {
		IPsec::deleteCRL(val);
		setCRLContents();
	    }
	}
        else if(ret == `next) {
	    string msg = IPsecConfig::finishImport();
	    if(msg != nil)
	    {
		if(!Popup::ContinueCancel(msg))
		    continue;
	    }

	    IPsec::modified = true;

            break;
        }
        else if(ret == `back) {
	    IPsecConfig::cleanupImport();
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

term ExpertConnectionContents()
{
    term header = `header(_("Key"), _("Value"));

    list content = IPsec::getCurrentConnectionItems();

    string caption = _("Configuration Options");

    term contents = `VBox(
	`Table(`id(`table), `opt(`notify), header, content),
	`HBox(
	    `PushButton(`id(`add), _("&Add")),
	    `PushButton(`id(`edit), _("&Edit")),
	    `PushButton(`id(`delete), _("&Delete"))
	)
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["expert"]:"",
	    Label::BackButton(), Label::OKButton());
}

list KeyValuePopup(string headline)
{
    UI::OpenDialog(
	`VBox(
	    `Heading(headline),
	    `TextEntry(`id(`key), _("Key:")),
	    `TextEntry(`id(`value), _("Value:")),
	    `VSpacing(0.5),
	    `HBox(
		`PushButton(`id(`ok), Label::OKButton()),
		`PushButton(`id(`cancel), Label::CancelButton())
	    )
	)
    );

    if( UI::UserInput() != `ok)
    {
	UI::CloseDialog();
	return nil;
    }

    string key = (string) UI::QueryWidget(`id(`key), `Value);
    string value = (string) UI::QueryWidget(`id(`value), `Value);

    UI::CloseDialog();

    return [ key, value ];
}

string TextEntryPopup(string headline, string txtlabel, string value)
{
    UI::OpenDialog(
	`VBox(
	    `Heading(headline),
	    `TextEntry(`id(`value), txtlabel, value),
	    `VSpacing(0.5),
	    `HBox(
		`PushButton(`id(`ok), `opt(`default), Label::OKButton()),
		`PushButton(`id(`cancel), Label::CancelButton())
	    )
	)
    );

    if( UI::UserInput() != `ok)
    {
	UI::CloseDialog();
	return nil;
    }

    string value = (string) UI::QueryWidget(`id(`value), `Value);

    UI::CloseDialog();

    return value;
}

any ConnectionExpertDialog ()
{
    symbol mode = `cacerts;

    ExpertConnectionContents();

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
//	    if(ReallyAbort()) break;
//	    else continue;
	    break;
	}
	else if(ret == `delete)
	{
	    string key = (string) UI::QueryWidget(`id(`table), `CurrentItem);
	    if(key == nil)
		continue;

	    if(Popup::YesNo(sformat(_("Delete %1?"), key)) == false)
		continue;

	    IPsec::current_connection = (map<string,string>) remove(IPsec::current_connection, key);

	    ExpertConnectionContents();

	}
	else if(ret == `add)
	{
	    list keyval = KeyValuePopup(_("Enter Key and Value"));

	    if(keyval == nil || size(keyval) != 2)
		continue;

	    string key = keyval[0]:"";
	    string value = keyval[1]:"";

	    if(key == "" || value == "")
		continue;

	    IPsec::current_connection[key] = value;

	    ExpertConnectionContents();

	}
	else if(ret == `edit)
	{
	    string key = (string) UI::QueryWidget(`id(`table), `CurrentItem);
	    if(key == nil)
		continue;

	    string val = TextEntryPopup(_("Enter New Value"), _("Value"), IPsec::current_connection[key]:"");

	    if(val == nil)
		continue;

	    IPsec::current_connection[key] = val;

	    ExpertConnectionContents();

	}
        else if(ret == `next || ret == `back) {
	    IPsec::commitChangedConnection();
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
